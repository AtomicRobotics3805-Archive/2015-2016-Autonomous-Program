package com.qualcomm.ftcrobotcontroller.opmodes;


import com.qualcomm.ftccommon.DbgLog;
import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorController;
import com.qualcomm.robotcore.hardware.GyroSensor;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.util.Range;

/**
 * An empty op mode serving as a template for custom OpModes
 */
public class V1_2BlueAllianceAutonomousReplica extends OpMode {

    //-------------------------------------constants-----------------------------------------------
    double CONVERT_TO_SECONDS_NUMBER = 0.000000001;
    double MAX_MOTOR_POWER_FORWARD_VALUE = 1;
    double HALF_MOTOR_POWER_FORWARD_VALUE = 0.5;
    double NO_POWER_TO_MOTORS_VALUE = 0;
    double HALF_MOTOR_POWER_BACKWARD_VALUE = -0.5;
    double MIN_MOTOR_POWER_BACKWARD_VALUE = -1;
    //---------------------------------------------------------------------------------------------

    //-------------------------hardware declarations------------------------------------------
    DcMotorController MotorController;
    DcMotorController CollectionSystemController;
    DcMotor LeftWheel;
    DcMotor RightWheel;
    DcMotor Sweeper;
    DcMotor ConveyorBelt;
    Servo ReleaseMechanism;
    GyroSensor gyroSensor;
    //---------------------------------------------------------------------------------------------

    //----------------------------------------PID variables----------------------------------------
    double Kp = 0.075;
    double Ki = 0;
    double Kd = 0;
    //float Kp = 2;
    //float Ki = 0.00018;
    //float Kd = 0.00018;
    double error;
    double integral = 0;
    double derivative = 0;
    double lastError;
    double turn;
    double powerA = 0;
    double powerC = 0;
    double dblPowerA;//The final value being sent to the motor controller
    double dblPowerC;//The final value being sent to the motor controller
    //---------------------------------------------------------------------------------------------

    //autonomous encoder value goals: 6000, 2000, 500.   53, 34, 11 inches

    //1: 0 = move_forward, 1 = move_backward, 2 = rotate_clockwise, 3 = rotate_counter_clockwise,
    // 4 = done moving.
    //2: Tp: how fast the robot moves while going in the right direction.
    //3: Direction: The direction the robot is heading to in degrees.
    //4: Distance: How far the robot should travel during move_forward.
    static double[][] PID = new double[][]{
            {0, 0.5,  0,   2880},   //Start of blue alliance's program
            {2, 0,    45,  0},
            {0, 0.5,  45,  5040},
            {1, -0.5,  90,  -572},//-572
            {3, 0,    45,  0},
            {1, -0.5, 45,  -5000},
            {2, 0,    135, 0},
            {0, 0.25, 135, 2400},
            {4, 0,    0,   0},      //End of blue alliance's program


            {0, 0.5,  0,   2880},   //Start of red alliance's program
            {3, 0,    -45,  0},
            {0, 0.5,  -45,  5040},
            {1, -0.5,  -90,  -572},//-572
            {2, 0,    -45,  0},
            {1, -0.5, -45,  -5000},
            {3, 0,    -135, 0},
            {0, 0.25, -135, 2400},
            {4, 0,    0,   0}       //End of red alliance's program
    };

    //Variable that holds the amount of time the program should wait before moving in seconds.
    float fltWaitTime = 0;

    //Variable that holds the number that determines which part of the switch case in loop()
    //function is ran.
    int intMainCurrentPart = 0;

    //Variable that holds the number that represents the part of the PID array that should be
    //running.
    //Set to 0 for blue alliance
    //Set to 9 for red alliance
    int intPIDCurrentPart = 0;

    //Variable that holds the number that determines which part of the switch case in
    //start_of_program_reset() is ran.
    int intResetEncodersPart = 0;

    //Variable that determines whether to run starting_direction(). It's turned off after ten cycles
    //of starting_direction.
    boolean blnGyroNotCentered = true;

    //Variable that holds the time when the program starts the main loop.
    long lngWaitStartTime = 0;

    //Variable that determines whether the encoder values being sent from the array PID are changed
    //to work with Andymark NeverRest motor encoders which have 1220 steps as one revolution.
    boolean blnConvertTetrixToAndymarkEncoderCount = false;

    //Variable that is added to the current encoder value to technically reset the encoder without
    //changing the runmode.
    int intCurrentEncoderValue = 0;

    //Variable that stores whether the wait_for_runmode function should increment its count or allow
    //the next case to run.
    boolean blnRunCycle = true;

    //Variable that stores how many loops have occurred after the encoders are reset.
    int intCycleCounter = 0;

    //Variable that holds the time when the program first starts and when the gyro_degree function
    // reaches the end of it's loop
    long lngStartTime = System.nanoTime();

    //Variable that is used to run case 0 ten times
    int i = 0;

    //Variable that stores the current direction in degrees the robot is facing
    double dblGyroValue = 0;

    //Variable that stores the offset of the gyro sensor
    double dblAverageZeroRotation = 0;

    /*
    * Constructor
    */
    public V1_2BlueAllianceAutonomousReplica() {

    }

    public void starting_direction(){
        telemetry.addData("3", "hello from starting direction");
        if(blnGyroNotCentered) {
            dblAverageZeroRotation += gyroSensor.getRotation();
            telemetry.addData("4", dblAverageZeroRotation);
            if (i == 9) {
                dblAverageZeroRotation = dblAverageZeroRotation / 10;
                blnGyroNotCentered = false;
                integral = 0;
                lastError = 0;
            }
            i++;
        }
    }

    public void start_of_program_reset(){
        switch(intResetEncodersPart) {
            case 0:
                Reset_encoders();
                break;
            case 1:
                wait_for_runmode();
                break;
            case 2:
                Run_Using_Encoders();
                break;
            case 3:
                wait_for_runmode();
                break;
            default:
                telemetry.addData("2", "Done resetting");
                break;
        }
    }
    
    //Finds and stores the current heading of the robot in dblGyroValue, based on the input from the
    // gyro sensor of degrees per second.
    public void gyro_degree(){

        telemetry.addData("4", (System.nanoTime() - lngStartTime) * CONVERT_TO_SECONDS_NUMBER);
        dblGyroValue += (gyroSensor.getRotation() - dblAverageZeroRotation) * ((System.nanoTime() - lngStartTime) * CONVERT_TO_SECONDS_NUMBER);
        lngStartTime = System.nanoTime();
    }

    public void wheel_movement_decider(){
        gyro_degree();
        
        if(PID[intPIDCurrentPart][0] == 0){
            move_forward();
        }
        else if(PID[intPIDCurrentPart][0] == 1){
            move_backward();
        }
        else if(PID[intPIDCurrentPart][0] == 2){
            rotate_clockwise();
        }
        else if(PID[intPIDCurrentPart][0] == 3){
            rotate_counter_clockwise();
        }
        else if(PID[intPIDCurrentPart][0] == 4){
            //Do nothing your done.
        }
    }

    public void Reset_encoders(){
        if (LeftWheel.getChannelMode() != DcMotorController.RunMode.RESET_ENCODERS &&
                RightWheel.getChannelMode() !=
                        DcMotorController.RunMode.RESET_ENCODERS) {
            LeftWheel.setChannelMode(DcMotorController.RunMode.RESET_ENCODERS);
            RightWheel.setChannelMode(DcMotorController.RunMode.RESET_ENCODERS);
        } else {
            blnRunCycle = true;
            intResetEncodersPart++;
        }
    }
    
    public void Run_Using_Encoders(){
        if (LeftWheel.getChannelMode() != DcMotorController.RunMode.RUN_USING_ENCODERS &&
                RightWheel.getChannelMode() !=
                        DcMotorController.RunMode.RUN_USING_ENCODERS) {
            LeftWheel.setChannelMode(DcMotorController.RunMode.RUN_USING_ENCODERS);
            RightWheel.setChannelMode(DcMotorController.RunMode.RUN_USING_ENCODERS);
        } else {
            blnRunCycle = true;
            intResetEncodersPart++;
        }
    }

    public void wait_for_runmode(){
        if(blnRunCycle){
            intCycleCounter ++;
        }
        if(intCycleCounter >= 20){
            blnRunCycle = false;
            intCycleCounter = 0;
            intResetEncodersPart++;
        }
    }

    public void move_forward(){
        int intDistanceTraveled;
        telemetry.addData("6", intCurrentEncoderValue);

        intDistanceTraveled = LeftWheel.getCurrentPosition();

        if(intDistanceTraveled < ConvertTetrixToAndymarkEncoderCountIfTrue() + intCurrentEncoderValue) {
            telemetry.addData("1", "hello");
            telemetry.addData("2", intDistanceTraveled);
            PID_loop();
        }
        else{
            telemetry.addData("3", "hello2");
            next_movement();
            telemetry.addData("5", "hello3");
        }
    }

    public void move_backward(){
        int intDistanceTraveled;
        intDistanceTraveled = LeftWheel.getCurrentPosition();

        if(intDistanceTraveled > ConvertTetrixToAndymarkEncoderCountIfTrue() + intCurrentEncoderValue){
            PID_loop();
        }
        else{
            next_movement();
        }
    }

    public void rotate_clockwise(){
        telemetry.addData("6", intCurrentEncoderValue);
        if(dblGyroValue < PID[intPIDCurrentPart][2]){
            PID_loop();
        }
        else{
            next_movement();
        }
    }

    public void rotate_counter_clockwise(){
        telemetry.addData("6", intCurrentEncoderValue);
        if(dblGyroValue > PID[intPIDCurrentPart][2]){
            PID_loop();
        }
        else{
            next_movement();
        }
    }

    public double ConvertTetrixToAndymarkEncoderCountIfTrue(){
        if(blnConvertTetrixToAndymarkEncoderCount){
            return(PID[intPIDCurrentPart][3] * 7/9);
        }
        else{
            return(PID[intPIDCurrentPart][3]);
        }
    }

    public void next_movement(){
        DbgLog.msg("FINISHED ONE MOVEMENT!!!");
        LeftWheel.setPower(NO_POWER_TO_MOTORS_VALUE);
        RightWheel.setPower(NO_POWER_TO_MOTORS_VALUE);
        intCurrentEncoderValue = LeftWheel.getCurrentPosition();
        intPIDCurrentPart++;
        /*if(gamepad1.a){
            intPIDCurrentPart ++;
        }*/
    }

    public void PID_loop(){
        error = dblGyroValue - PID[intPIDCurrentPart][2];
        integral = integral+error;
        derivative = error-lastError;
        turn = (Kp*error)+(Ki*integral)+(Kd*derivative);
        powerA = PID[intPIDCurrentPart][1]+turn;
        powerC = PID[intPIDCurrentPart][1]-turn;

        dblPowerA = Range.clip(powerA, MIN_MOTOR_POWER_BACKWARD_VALUE, MAX_MOTOR_POWER_FORWARD_VALUE);
        dblPowerC = Range.clip(powerC, MIN_MOTOR_POWER_BACKWARD_VALUE, MAX_MOTOR_POWER_FORWARD_VALUE);

                /*LeftWheel.setPower(dblPowerC);
                LeftBackWheel.setPower(-dblPowerA);
                RightBackWheel.setPower(dblPowerA);
                RightWheel.setPower(-dblPowerC);*/
        LeftWheel.setPower(dblPowerC);
        RightWheel.setPower(dblPowerA);
        lastError = error;

        telemetry.addData("1", dblGyroValue);
        /*telemetry.addData("2", gyroSensor.getRotation());
        telemetry.addData("3", dblAverageZeroRotation);
        telemetry.addData("5", powerA);
        telemetry.addData("6", powerC);
        telemetry.addData("7", turn);*/
    }

    /*
    * Code to run when the op mode is first enabled goes here
    * @see com.qualcomm.robotcore.eventloop.opmode.OpMode#start()
    */
    @Override
    public void init() {
        LeftWheel = hardwareMap.dcMotor.get("LM");
        RightWheel = hardwareMap.dcMotor.get("RM");

        MotorController = hardwareMap.dcMotorController.get("MC");
        //CollectionSystemController = hardwareMap.dcMotorController.get("CS");

        gyroSensor = hardwareMap.gyroSensor.get("gyro");
        
        LeftWheel.setDirection(DcMotor.Direction.REVERSE);
    }

    public void init_loop(){
        DbgLog.msg("dblGyroValue: " + String.format("%f", dblGyroValue));
        telemetry.addData("1", "hello from init_loop");
        start_of_program_reset();
        starting_direction();
        telemetry.addData("2", dblAverageZeroRotation);
        telemetry.addData("3", dblGyroValue);
    }

    /*
    * This method will be called repeatedly in a loop
    * @see com.qualcomm.robotcore.eventloop.opmode.OpMode#loop()
    */
    @Override
    public void loop() {
        switch(intMainCurrentPart) {
            case 0:
                DbgLog.msg("START BUTTON PRESSED!!!");
                lngWaitStartTime = System.nanoTime();
                intMainCurrentPart++;
                break;
            case 1:
                if(System.nanoTime() < lngWaitStartTime + fltWaitTime / CONVERT_TO_SECONDS_NUMBER) {
                    //Wait.
                }
                else{
                    intMainCurrentPart++;
                }
                break;
            case 2:
                DbgLog.msg("dblGyroValue: " + String.format("%f", dblGyroValue));
                DbgLog.msg("intCurrentEncoderValue: " + String.format("%d", LeftWheel.getCurrentPosition()));
                wheel_movement_decider();
                break;
        }
    }

    /*
    * Code to run when the op mode is first disabled goes here
    * @see com.qualcomm.robotcore.eventloop.opmode.OpMode#stop()
    */
    @Override
    public void stop() {

    }
}
